
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.5.0
 * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
 */
Prisma.prismaVersion = {
  client: "6.5.0",
  engine: "173f8d54f8d52e692c7e27e72a88314ec7aeff60"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ActivitiesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  action: 'action',
  type: 'type',
  description: 'description',
  ip_address: 'ip_address',
  user_agent: 'user_agent',
  status: 'status',
  operator_id: 'operator_id',
  branch_id: 'branch_id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  old_values: 'old_values',
  new_values: 'new_values',
  metadata: 'metadata'
};

exports.Prisma.BranchesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  address: 'address',
  province: 'province',
  city: 'city',
  postal_code: 'postal_code',
  phone: 'phone',
  email: 'email',
  is_active: 'is_active',
  prefix: 'prefix',
  company_id: 'company_id',
  manager_name: 'manager_name',
  opening_hours: 'opening_hours',
  timezone: 'timezone'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  description: 'description',
  icon: 'icon',
  is_active: 'is_active',
  order_position: 'order_position'
};

exports.Prisma.CompaniesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  email: 'email',
  phone: 'phone',
  ruc: 'ruc',
  logo_url: 'logo_url',
  website: 'website',
  tax_id: 'tax_id',
  business_type: 'business_type',
  industry: 'industry',
  founded_date: 'founded_date',
  is_active: 'is_active'
};

exports.Prisma.Email_campaignsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  subject: 'subject',
  status: 'status',
  recipients: 'recipients',
  send_to_all: 'send_to_all',
  tracking: 'tracking',
  tracking_id: 'tracking_id',
  stats: 'stats',
  user_id: 'user_id',
  template_id: 'template_id',
  scheduled_for: 'scheduled_for',
  sender_name: 'sender_name',
  sender_email: 'sender_email',
  reply_to: 'reply_to',
  segment_criteria: 'segment_criteria',
  test_recipients: 'test_recipients',
  is_recurring: 'is_recurring',
  recurrence_pattern: 'recurrence_pattern'
};

exports.Prisma.Email_templatesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  subject: 'subject',
  body: 'body',
  html_body: 'html_body',
  elements: 'elements',
  editor_settings: 'editor_settings',
  thumbnail: 'thumbnail',
  operator_id: 'operator_id',
  category: 'category',
  variables: 'variables',
  is_default: 'is_default',
  version: 'version'
};

exports.Prisma.Gift_cardsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  code: 'code',
  amount: 'amount',
  balance: 'balance',
  status: 'status',
  issue_date: 'issue_date',
  expiry_date: 'expiry_date',
  recipient_name: 'recipient_name',
  recipient_email: 'recipient_email',
  sender_id: 'sender_id',
  redeemed_at: 'redeemed_at',
  message: 'message',
  payment_method: 'payment_method',
  send_date: 'send_date',
  design_template: 'design_template',
  branch_id: 'branch_id',
  is_reloadable: 'is_reloadable',
  access_pin: 'access_pin',
  usage_history: 'usage_history'
};

exports.Prisma.Invoice_itemsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  invoice_id: 'invoice_id',
  product_id: 'product_id',
  plan_id: 'plan_id',
  description: 'description',
  quantity: 'quantity',
  unit_price: 'unit_price',
  total_price: 'total_price',
  discount_rate: 'discount_rate',
  tax_rate: 'tax_rate',
  item_order: 'item_order',
  unit_of_measure: 'unit_of_measure',
  is_taxable: 'is_taxable',
  serial_numbers: 'serial_numbers'
};

exports.Prisma.Invoice_packagesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  invoice_id: 'invoice_id',
  package_id: 'package_id'
};

exports.Prisma.InvoicesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  invoice_number: 'invoice_number',
  issue_date: 'issue_date',
  due_date: 'due_date',
  status: 'status',
  is_paid: 'is_paid',
  total_amount: 'total_amount',
  tax_amount: 'tax_amount',
  discount_amount: 'discount_amount',
  user_id: 'user_id',
  branch_id: 'branch_id',
  operator_id: 'operator_id',
  billing_address: 'billing_address',
  shipping_address: 'shipping_address',
  notes: 'notes',
  payment_terms: 'payment_terms',
  currency: 'currency',
  conversion_rate: 'conversion_rate',
  tracking_number: 'tracking_number',
  shipping_method: 'shipping_method',
  invoice_type: 'invoice_type',
  commission_amount: 'commission_amount',
  marketplace_fee_rate: 'marketplace_fee_rate',
  platform: 'platform',
  external_reference_id: 'external_reference_id',
  tax_details: 'tax_details',
  price_plan: 'price_plan',
  shipping_insurance: 'shipping_insurance',
  paid_amount: 'paid_amount',
  remaining_amount: 'remaining_amount',
  last_payment_date: 'last_payment_date'
};

exports.Prisma.Notification_preferencesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_id: 'user_id',
  push_enabled: 'push_enabled',
  email_enabled: 'email_enabled',
  sms_enabled: 'sms_enabled',
  news_and_updates: 'news_and_updates',
  order_updates: 'order_updates',
  promotions: 'promotions',
  security_alerts: 'security_alerts',
  quiet_hours_start: 'quiet_hours_start',
  quiet_hours_end: 'quiet_hours_end',
  quiet_hours_enabled: 'quiet_hours_enabled',
  frequency: 'frequency'
};

exports.Prisma.Notification_usersScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  title: 'title',
  message: 'message',
  type: 'type',
  is_read: 'is_read',
  is_deleted: 'is_deleted',
  user_id: 'user_id',
  data: 'data',
  priority: 'priority',
  action_url: 'action_url',
  icon: 'icon',
  expiry_date: 'expiry_date',
  requires_action: 'requires_action'
};

exports.Prisma.Notifications_operatorScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  title: 'title',
  message: 'message',
  is_read: 'is_read',
  operator_id: 'operator_id',
  data: 'data',
  notification_type: 'notification_type',
  priority: 'priority',
  action_required: 'action_required',
  action_type: 'action_type',
  action_data: 'action_data',
  expiry_date: 'expiry_date'
};

exports.Prisma.Operator_typesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  description: 'description',
  permissions: 'permissions'
};

exports.Prisma.OperatorsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  email: 'email',
  password: 'password',
  first_name: 'first_name',
  last_name: 'last_name',
  phone: 'phone',
  photo: 'photo',
  role: 'role',
  status: 'status',
  last_login_at: 'last_login_at',
  branch_id: 'branch_id',
  type_operator_id: 'type_operator_id',
  position: 'position',
  hire_date: 'hire_date',
  birth_date: 'birth_date',
  emergency_contact: 'emergency_contact',
  skills: 'skills',
  personal_id: 'personal_id',
  address: 'address'
};

exports.Prisma.PackagesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  user_reference: 'user_reference',
  package_status: 'package_status',
  tracking_number: 'tracking_number',
  height: 'height',
  width: 'width',
  length: 'length',
  weight: 'weight',
  volumetric_weight: 'volumetric_weight',
  insurance: 'insurance',
  shipping_stages: 'shipping_stages',
  branch_id: 'branch_id',
  notes: 'notes',
  declared_value: 'declared_value',
  customs_information: 'customs_information',
  is_fragile: 'is_fragile',
  estimated_delivery_date: 'estimated_delivery_date',
  operator_id: 'operator_id',
  position: 'position'
};

exports.Prisma.Payment_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  is_active: 'is_active',
  processing_fee_percentage: 'processing_fee_percentage',
  processing_fee_fixed: 'processing_fee_fixed',
  requires_approval: 'requires_approval',
  icon: 'icon'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  invoice_id: 'invoice_id',
  amount: 'amount',
  payment_date: 'payment_date',
  payment_method: 'payment_method',
  status: 'status',
  payment_provider: 'payment_provider',
  currency: 'currency',
  exchange_rate: 'exchange_rate',
  fees: 'fees',
  payer_details: 'payer_details',
  receipt_url: 'receipt_url',
  notes: 'notes',
  transaction_id: 'transaction_id',
  payment_method_id: 'payment_method_id'
};

exports.Prisma.Plan_addressesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  plan_id: 'plan_id',
  address_type: 'address_type',
  address_line1: 'address_line1',
  address_line2: 'address_line2',
  city: 'city',
  state: 'state',
  country: 'country',
  postal_code: 'postal_code',
  contact_name: 'contact_name',
  contact_phone: 'contact_phone',
  is_primary: 'is_primary',
  additional_info: 'additional_info'
};

exports.Prisma.Plan_featuresScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  plan_id: 'plan_id',
  feature_name: 'feature_name',
  feature_value: 'feature_value',
  is_included: 'is_included',
  limit_quantity: 'limit_quantity',
  description: 'description'
};

exports.Prisma.PlansScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  description: 'description',
  price: 'price',
  billing_cycle: 'billing_cycle',
  color: 'color',
  is_active: 'is_active',
  branch_id: 'branch_id',
  trial_period_days: 'trial_period_days',
  setup_fee: 'setup_fee',
  max_users: 'max_users',
  discounts: 'discounts'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  description: 'description',
  price: 'price',
  sale_price: 'sale_price',
  sku: 'sku',
  barcode: 'barcode',
  stock_quantity: 'stock_quantity',
  is_active: 'is_active',
  status: 'status',
  category_id: 'category_id',
  branch_id: 'branch_id',
  weight: 'weight',
  dimensions: 'dimensions',
  images: 'images',
  tags: 'tags',
  min_stock_alert: 'min_stock_alert',
  manufacturer: 'manufacturer',
  tax_rate: 'tax_rate'
};

exports.Prisma.Type_usersScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  code: 'code',
  description: 'description',
  name: 'name',
  permissions: 'permissions'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  account_status: 'account_status',
  birth_date: 'birth_date',
  branch_id: 'branch_id',
  email: 'email',
  first_name: 'first_name',
  is_email_verified: 'is_email_verified',
  is_online: 'is_online',
  is_verified: 'is_verified',
  last_name: 'last_name',
  last_seen: 'last_seen',
  phone: 'phone',
  photo_url: 'photo_url',
  plan_id: 'plan_id',
  type_user_id: 'type_user_id',
  shipping_insurance: 'shipping_insurance',
  is_business: 'is_business',
  ruc: 'ruc',
  company_name: 'company_name',
  referral_source_id: 'referral_source_id'
};

exports.Prisma.VehiclesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  make: 'make',
  model: 'model',
  year: 'year',
  license_plate: 'license_plate',
  status: 'status',
  branch_id: 'branch_id',
  color: 'color',
  vin: 'vin',
  purchase_date: 'purchase_date',
  last_maintenance_date: 'last_maintenance_date',
  mileage: 'mileage',
  fuel_type: 'fuel_type',
  insurance_info: 'insurance_info',
  technical_specs: 'technical_specs'
};

exports.Prisma.WalletsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  balance: 'balance',
  currency: 'currency',
  is_active: 'is_active',
  last_transaction_date: 'last_transaction_date',
  user_id: 'user_id'
};

exports.Prisma.Saved_cardsScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  card_token: 'card_token',
  card_type: 'card_type',
  cardholder_name: 'cardholder_name',
  expiry_month: 'expiry_month',
  expiry_year: 'expiry_year',
  brand: 'brand',
  last_four_digits: 'last_four_digits',
  is_default: 'is_default',
  created_at: 'created_at',
  updated_at: 'updated_at',
  nick_name: 'nick_name'
};

exports.Prisma.Payment_methodsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  is_active: 'is_active',
  details: 'details',
  payment_type_id: 'payment_type_id'
};

exports.Prisma.Transaction_categoriesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  name: 'name',
  description: 'description',
  parent_id: 'parent_id',
  is_active: 'is_active'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  description: 'description',
  status: 'status',
  transaction_date: 'transaction_date',
  transaction_type: 'transaction_type',
  reference_id: 'reference_id',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  payment_method_id: 'payment_method_id',
  metadata: 'metadata',
  category_id: 'category_id',
  transaction_type_id: 'transaction_type_id',
  amount: 'amount'
};

exports.Prisma.Transaction_typesScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  code: 'code',
  name: 'name',
  description: 'description',
  affects_balance: 'affects_balance',
  is_active: 'is_active'
};

exports.Prisma.Referral_sourcesScalarFieldEnum = {
  id: 'id',
  source_name: 'source_name'
};

exports.Prisma.Cash_closuresScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  cash_closures: 'cash_closures',
  total_cash: 'total_cash',
  total_yappy: 'total_yappy',
  total_card: 'total_card',
  total_bank_transfer: 'total_bank_transfer',
  total_digital_wallet: 'total_digital_wallet',
  total_internal_wallet: 'total_internal_wallet',
  total_credits: 'total_credits',
  total_debits: 'total_debits',
  final_balance: 'final_balance',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.activity_type_enum = exports.$Enums.activity_type_enum = {
  login: 'login',
  logout: 'logout',
  create: 'create',
  update: 'update',
  delete: 'delete',
  view: 'view'
};

exports.activity_status_enum = exports.$Enums.activity_status_enum = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  cancelled: 'cancelled'
};

exports.payment_method_enum = exports.$Enums.payment_method_enum = {
  cash: 'cash',
  credit_card: 'credit_card',
  debit_card: 'debit_card',
  bank_transfer: 'bank_transfer',
  paypal: 'paypal',
  crypto: 'crypto',
  gift_card: 'gift_card',
  store_credit: 'store_credit'
};

exports.invoice_status_enum = exports.$Enums.invoice_status_enum = {
  draft: 'draft',
  sent: 'sent',
  paid: 'paid',
  partial: 'partial',
  overdue: 'overdue',
  cancelled: 'cancelled'
};

exports.invoice_type_enum = exports.$Enums.invoice_type_enum = {
  marketplace: 'marketplace',
  package: 'package',
  other: 'other'
};

exports.operator_role_enum = exports.$Enums.operator_role_enum = {
  admin: 'admin',
  manager: 'manager',
  staff: 'staff',
  guest: 'guest',
  Contador: 'Contador',
  gerente_de_sucursal: 'gerente_de_sucursal',
  programador: 'programador'
};

exports.operator_status_enum = exports.$Enums.operator_status_enum = {
  active: 'active',
  inactive: 'inactive',
  suspended: 'suspended',
  pending: 'pending'
};

exports.package_status_enum = exports.$Enums.package_status_enum = {
  pending: 'pending',
  in_transit: 'in_transit',
  delivered: 'delivered',
  returned: 'returned',
  lost: 'lost',
  canceled: 'canceled'
};

exports.payment_status_enum = exports.$Enums.payment_status_enum = {
  pending: 'pending',
  completed: 'completed',
  failed: 'failed',
  refunded: 'refunded',
  partially_refunded: 'partially_refunded',
  chargeback: 'chargeback'
};

exports.product_status_enum = exports.$Enums.product_status_enum = {
  active: 'active',
  inactive: 'inactive',
  out_of_stock: 'out_of_stock',
  discontinued: 'discontinued',
  coming_soon: 'coming_soon'
};

exports.Prisma.ModelName = {
  activities: 'activities',
  branches: 'branches',
  categories: 'categories',
  companies: 'companies',
  email_campaigns: 'email_campaigns',
  email_templates: 'email_templates',
  gift_cards: 'gift_cards',
  invoice_items: 'invoice_items',
  invoice_packages: 'invoice_packages',
  invoices: 'invoices',
  notification_preferences: 'notification_preferences',
  notification_users: 'notification_users',
  notifications_operator: 'notifications_operator',
  operator_types: 'operator_types',
  operators: 'operators',
  packages: 'packages',
  payment_types: 'payment_types',
  payments: 'payments',
  plan_addresses: 'plan_addresses',
  plan_features: 'plan_features',
  plans: 'plans',
  products: 'products',
  type_users: 'type_users',
  users: 'users',
  vehicles: 'vehicles',
  wallets: 'wallets',
  saved_cards: 'saved_cards',
  payment_methods: 'payment_methods',
  transaction_categories: 'transaction_categories',
  transactions: 'transactions',
  transaction_types: 'transaction_types',
  referral_sources: 'referral_sources',
  cash_closures: 'cash_closures'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
