const { PrismaClient } = require('@prisma/client');
const { Client } = require('pg');
require('dotenv').config();

async function diagnosePerformance() {
  console.log('üîç Iniciando diagn√≥stico de rendimiento...');
  
  // Crear cliente Prisma con logging
  const prisma = new PrismaClient({
    log: ['query', 'info', 'warn', 'error'],
  });
  
  // Crear cliente PostgreSQL directo
  const pgClient = new Client({
    connectionString: process.env.DATABASE_URL,
  });
  
  try {
    console.log('Conectando a la base de datos...');
    const startTime = Date.now();
    await prisma.$connect();
    const connectionTime = Date.now() - startTime;
    console.log(`‚úÖ Conexi√≥n establecida en ${connectionTime}ms`);
    
    await pgClient.connect();
    
    // 1. Verificar √≠ndices en la tabla de operadores
    console.log('\nüìä Verificando √≠ndices en la tabla de operadores...');
    const indexesResult = await pgClient.query(`
      SELECT indexname, indexdef 
      FROM pg_indexes 
      WHERE tablename = 'operators'
    `);
    
    console.log(`√çndices encontrados: ${indexesResult.rows.length}`);
    indexesResult.rows.forEach(row => {
      console.log(`- ${row.indexname}: ${row.indexdef}`);
    });
    
    // 2. Analizar consultas lentas
    console.log('\nüìä Analizando consultas lentas...');
    const slowQueriesResult = await pgClient.query(`
      SELECT query, calls, total_time, mean_time, rows
      FROM pg_stat_statements
      WHERE query ILIKE '%operators%'
      ORDER BY mean_time DESC
      LIMIT 5;
    `).catch(err => {
      console.log('‚ö†Ô∏è No se pudo obtener estad√≠sticas de consultas lentas. Es posible que la extensi√≥n pg_stat_statements no est√© habilitada.');
      return { rows: [] };
    });
    
    if (slowQueriesResult.rows.length > 0) {
      console.log('Consultas lentas encontradas:');
      slowQueriesResult.rows.forEach((row, index) => {
        console.log(`\n${index + 1}. Tiempo medio: ${row.mean_time}ms, Llamadas: ${row.calls}`);
        console.log(`Query: ${row.query.substring(0, 200)}...`);
      });
    } else {
      console.log('No se encontraron consultas lentas o no hay suficientes datos estad√≠sticos.');
    }
    
    // 3. Probar rendimiento de consultas espec√≠ficas
    console.log('\nüìä Probando rendimiento de consultas espec√≠ficas...');
    
    // 3.1 Consulta de listado de operadores
    console.log('\nPrueba 1: Listado de operadores');
    const operatorsListStartTime = Date.now();
    const operatorsResult = await prisma.operators.findMany({
      take: 20,
      include: {
        branches: {
          select: {
            name: true
          }
        }
      }
    });
    const operatorsListTime = Date.now() - operatorsListStartTime;
    console.log(`‚úÖ Consulta completada en ${operatorsListTime}ms, ${operatorsResult.length} resultados`);
    
    // 3.2 Consulta de actividades de operadores
    console.log('\nPrueba 2: Actividades de operadores');
    if (operatorsResult.length > 0) {
      const operatorId = operatorsResult[0].id;
      const activitiesStartTime = Date.now();
      const activitiesResult = await prisma.activities.findMany({
        where: { operator_id: operatorId },
        take: 20,
        orderBy: { created_at: 'desc' }
      });
      const activitiesTime = Date.now() - activitiesStartTime;
      console.log(`‚úÖ Consulta completada en ${activitiesTime}ms, ${activitiesResult.length} resultados`);
    } else {
      console.log('‚ö†Ô∏è No hay operadores para probar consulta de actividades');
    }
    
    // 4. Verificar configuraci√≥n de conexi√≥n
    console.log('\nüìä Verificando configuraci√≥n de conexi√≥n...');
    console.log(`DATABASE_URL tiene par√°metros de optimizaci√≥n: ${process.env.DATABASE_URL.includes('connection_limit')}`);
    console.log(`PRISMA_CONNECTION_LIMIT: ${process.env.PRISMA_CONNECTION_LIMIT || 'no configurado'}`);
    console.log(`PRISMA_QUERY_TIMEOUT: ${process.env.PRISMA_QUERY_TIMEOUT || 'no configurado'}`);
    
    // 5. Verificar estad√≠sticas de la base de datos
    console.log('\nüìä Verificando estad√≠sticas de la base de datos...');
    const dbStatsResult = await pgClient.query(`
      SELECT relname as table_name, 
             n_live_tup as row_count,
             pg_size_pretty(pg_total_relation_size(relid)) as total_size
      FROM pg_stat_user_tables
      ORDER BY n_live_tup DESC;
    `);
    
    console.log('Estad√≠sticas de tablas:');
    dbStatsResult.rows.forEach(row => {
      console.log(`- ${row.table_name}: ${row.row_count} filas, tama√±o: ${row.total_size}`);
    });
    
    // 6. Aplicar optimizaciones inmediatas
    console.log('\nüìä Aplicando optimizaciones inmediatas...');
    
    // 6.1 Actualizar estad√≠sticas
    console.log('Actualizando estad√≠sticas de la base de datos...');
    await pgClient.query('ANALYZE operators');
    await pgClient.query('ANALYZE activities');
    console.log('‚úÖ Estad√≠sticas actualizadas');
    
    // 6.2 Limpiar cach√© de consultas
    console.log('Limpiando cach√© de consultas...');
    await pgClient.query('DISCARD ALL');
    console.log('‚úÖ Cach√© de consultas limpiada');
    
    // 7. Recomendaciones
    console.log('\nüìä Recomendaciones de optimizaci√≥n:');
    console.log('1. Aseg√∫rate de que el servicio de cach√© est√© correctamente configurado y funcionando');
    console.log('2. Verifica que las variables de entorno de optimizaci√≥n est√©n configuradas en el archivo .env');
    console.log('3. Considera agregar √≠ndices adicionales para las consultas m√°s frecuentes');
    console.log('4. Utiliza consultas con select espec√≠fico en lugar de include cuando sea posible');
    console.log('5. Implementa paginaci√≥n en todas las consultas que devuelven m√∫ltiples resultados');
    console.log('6. Considera utilizar consultas nativas para operaciones cr√≠ticas de rendimiento');
    
    console.log('\nüéâ Diagn√≥stico de rendimiento completado');
    
  } catch (error) {
    console.error('‚ùå Error durante el diagn√≥stico:', error);
  } finally {
    await prisma.$disconnect();
    await pgClient.end();
    console.log('Conexiones cerradas');
  }
}

diagnosePerformance(); 