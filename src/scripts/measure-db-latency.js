/**
 * Script para medir la latencia de conexi√≥n y consultas a la base de datos
 */

const { Client } = require('pg');
require('dotenv').config();

async function measureDatabaseLatency() {
  console.log('üîç Iniciando medici√≥n de latencia de la base de datos...');
  console.log(`Host: ${process.env.DATABASE_URL.match(/aws-[^:]*\.supabase\.com/)[0]}`);
  
  // N√∫mero de pruebas a realizar
  const NUM_TESTS = 5;
  let totalConnectionTime = 0;
  let totalQueryTime = 0;
  let totalDisconnectTime = 0;
  
  for (let i = 1; i <= NUM_TESTS; i++) {
    console.log(`\nüîÑ Prueba ${i} de ${NUM_TESTS}:`);
    
    // Crear cliente PostgreSQL
    const client = new Client({
      connectionString: process.env.DATABASE_URL,
    });
    
    try {
      // Medir tiempo de conexi√≥n
      console.log('  Conectando a la base de datos...');
      const connectionStart = Date.now();
      await client.connect();
      const connectionTime = Date.now() - connectionStart;
      totalConnectionTime += connectionTime;
      console.log(`  ‚úÖ Conexi√≥n establecida en ${connectionTime}ms`);
      
      // Medir tiempo de consulta simple
      console.log('  Ejecutando consulta simple (SELECT 1)...');
      const queryStart = Date.now();
      await client.query('SELECT 1');
      const queryTime = Date.now() - queryStart;
      totalQueryTime += queryTime;
      console.log(`  ‚úÖ Consulta simple completada en ${queryTime}ms`);
      
      // Medir tiempo de desconexi√≥n
      console.log('  Cerrando conexi√≥n...');
      const disconnectStart = Date.now();
      await client.end();
      const disconnectTime = Date.now() - disconnectStart;
      totalDisconnectTime += disconnectTime;
      console.log(`  ‚úÖ Conexi√≥n cerrada en ${disconnectTime}ms`);
      
    } catch (error) {
      console.error(`  ‚ùå Error: ${error.message}`);
      if (client) {
        try {
          await client.end();
        } catch (e) {
          // Ignorar errores al cerrar la conexi√≥n
        }
      }
    }
    
    // Esperar un segundo entre pruebas
    if (i < NUM_TESTS) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }
  
  // Calcular promedios
  const avgConnectionTime = Math.round(totalConnectionTime / NUM_TESTS);
  const avgQueryTime = Math.round(totalQueryTime / NUM_TESTS);
  const avgDisconnectTime = Math.round(totalDisconnectTime / NUM_TESTS);
  const avgTotalTime = avgConnectionTime + avgQueryTime + avgDisconnectTime;
  
  console.log('\nüìä Resultados:');
  console.log(`Tiempo promedio de conexi√≥n: ${avgConnectionTime}ms`);
  console.log(`Tiempo promedio de consulta simple: ${avgQueryTime}ms`);
  console.log(`Tiempo promedio de desconexi√≥n: ${avgDisconnectTime}ms`);
  console.log(`Tiempo total promedio: ${avgTotalTime}ms`);
  
  // Evaluar la latencia
  console.log('\nüìù An√°lisis:');
  if (avgConnectionTime > 500) {
    console.log('‚ö†Ô∏è La latencia de conexi√≥n es alta (>500ms). Esto puede afectar el rendimiento de la aplicaci√≥n.');
    console.log('   - Considera usar un pool de conexiones para reducir el impacto');
    console.log('   - Verifica si la regi√≥n de Supabase est√° cercana a tu aplicaci√≥n');
  } else if (avgConnectionTime > 200) {
    console.log('‚ÑπÔ∏è La latencia de conexi√≥n es moderada (>200ms).');
    console.log('   - Usar un pool de conexiones es recomendado');
  } else {
    console.log('‚úÖ La latencia de conexi√≥n es buena (<200ms).');
  }
  
  if (avgQueryTime > 100) {
    console.log('‚ö†Ô∏è La latencia de consulta es alta (>100ms). Considera implementar cach√©.');
  } else {
    console.log('‚úÖ La latencia de consulta es aceptable (<100ms).');
  }
  
  console.log('\nüìù Recomendaciones:');
  console.log('1. Implementa un pool de conexiones para reducir el impacto de la latencia de conexi√≥n');
  console.log('2. Utiliza cach√© para consultas frecuentes');
  console.log('3. Agrupa consultas relacionadas para reducir viajes de ida y vuelta a la base de datos');
  console.log('4. Considera utilizar la interfaz de conexi√≥n directa para migraciones y otras operaciones administrativas');
}

measureDatabaseLatency(); 