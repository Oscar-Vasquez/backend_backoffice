const { Client } = require('pg');
require('dotenv').config();

async function optimizeConnection() {
  console.log('üöÄ Iniciando optimizaci√≥n de la conexi√≥n a la base de datos...');
  
  // Crear una conexi√≥n directa a PostgreSQL
  const client = new Client({
    connectionString: process.env.DATABASE_URL,
  });
  
  try {
    console.log('Conectando a la base de datos...');
    await client.connect();
    
    // 1. Verificar y optimizar la configuraci√≥n de la conexi√≥n
    console.log('\nüìä Verificando configuraci√≥n de la conexi√≥n...');
    
    // Verificar el n√∫mero m√°ximo de conexiones
    const maxConnectionsResult = await client.query('SHOW max_connections');
    console.log(`Max connections: ${maxConnectionsResult.rows[0].max_connections}`);
    
    // Verificar la memoria de trabajo
    const workMemResult = await client.query('SHOW work_mem');
    console.log(`Work memory: ${workMemResult.rows[0].work_mem}`);
    
    // Verificar los b√∫feres compartidos
    const sharedBuffersResult = await client.query('SHOW shared_buffers');
    console.log(`Shared buffers: ${sharedBuffersResult.rows[0].shared_buffers}`);
    
    // 2. Verificar y optimizar las estad√≠sticas de la base de datos
    console.log('\nüìä Actualizando estad√≠sticas de la base de datos...');
    
    // Actualizar estad√≠sticas de la tabla de operadores
    await client.query('ANALYZE operators');
    console.log('‚úÖ Estad√≠sticas de la tabla de operadores actualizadas');
    
    // Actualizar estad√≠sticas de la tabla de actividades
    await client.query('ANALYZE activities');
    console.log('‚úÖ Estad√≠sticas de la tabla de actividades actualizadas');
    
    // 3. Verificar y optimizar los √≠ndices
    console.log('\nüìä Verificando √≠ndices...');
    
    // Verificar los √≠ndices de la tabla de operadores
    const operatorsIndexesQuery = `
      SELECT indexname, indexdef
      FROM pg_indexes
      WHERE tablename = 'operators'
    `;
    const operatorsIndexesResult = await client.query(operatorsIndexesQuery);
    console.log('√çndices de la tabla de operadores:');
    operatorsIndexesResult.rows.forEach(idx => {
      console.log(`- ${idx.indexname}: ${idx.indexdef}`);
    });
    
    // Verificar los √≠ndices de la tabla de actividades
    const activitiesIndexesQuery = `
      SELECT indexname, indexdef
      FROM pg_indexes
      WHERE tablename = 'activities'
    `;
    const activitiesIndexesResult = await client.query(activitiesIndexesQuery);
    console.log('\n√çndices de la tabla de actividades:');
    activitiesIndexesResult.rows.forEach(idx => {
      console.log(`- ${idx.indexname}: ${idx.indexdef}`);
    });
    
    // 4. Verificar y optimizar el rendimiento de las consultas
    console.log('\nüìä Verificando rendimiento de las consultas...');
    
    // Ejecutar una consulta de prueba
    console.log('Ejecutando consulta de prueba...');
    const startTime = Date.now();
    const testQuery = `
      SELECT o.id, o.email, o.first_name, o.last_name, o.phone, 
        o.role, o.status, o.photo, o.branch_id, o.type_operator_id,
        o.created_at, o.updated_at, o.last_login_at,
        b.id as branch_id, b.name as branch_name
      FROM operators o
      LEFT JOIN branches b ON o.branch_id = b.id
      LIMIT 5
    `;
    const testQueryResult = await client.query(testQuery);
    console.log(`‚úÖ Consulta de prueba completada en ${Date.now() - startTime}ms`);
    console.log(`Operadores recuperados: ${testQueryResult.rows.length}`);
    
    console.log('\nüéâ Optimizaci√≥n de la conexi√≥n completada');
    
  } catch (error) {
    console.error('‚ùå Error durante la optimizaci√≥n:', error);
  } finally {
    await client.end();
    console.log('Conexi√≥n cerrada');
  }
}

optimizeConnection(); 