import { PrismaService } from '../prisma/prisma.service';
import { UpdateDimensionsDto } from './dto/update-dimensions.dto';
import { Prisma } from '@prisma/client';
import { UpdateWeightsDto } from './dto/update-weights.dto';
export declare class PackagesService {
    private readonly prisma;
    constructor(prisma: PrismaService);
    findAll(params: {
        skip?: number;
        take?: number;
        cursor?: Prisma.packagesWhereUniqueInput;
        where?: Prisma.packagesWhereInput;
        orderBy?: Prisma.packagesOrderByWithRelationInput;
    }): Promise<{
        data: {
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            position: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        }[];
        meta: {
            total: number;
            skip: number;
            take: number;
        };
    }>;
    findOne(id: string): Promise<{
        success: boolean;
        data: {
            position: string;
            user: any;
            branch: {
                id: string;
                name: string;
                address: string;
            };
            operator: {
                id: string;
                name: string;
                email: string;
            };
            branches: {
                email: string | null;
                id: string;
                created_at: Date;
                updated_at: Date | null;
                phone: string | null;
                address: string | null;
                name: string;
                province: string | null;
                city: string | null;
                postal_code: string | null;
                is_active: boolean | null;
                prefix: string | null;
                company_id: string;
                manager_name: string | null;
                opening_hours: Prisma.JsonValue | null;
                timezone: string | null;
            };
            operators: {
                email: string;
                password: string;
                id: string;
                created_at: Date;
                updated_at: Date | null;
                first_name: string;
                last_name: string;
                phone: string | null;
                photo: string | null;
                role: import(".prisma/client").$Enums.operator_role_enum;
                status: import(".prisma/client").$Enums.operator_status_enum;
                last_login_at: Date | null;
                branch_id: string;
                type_operator_id: string;
                position: string | null;
                hire_date: Date | null;
                birth_date: Date | null;
                emergency_contact: Prisma.JsonValue | null;
                skills: string[];
                personal_id: string | null;
                address: string | null;
            };
            users: {
                email: string | null;
                id: string;
                created_at: Date;
                updated_at: Date | null;
                first_name: string | null;
                last_name: string | null;
                phone: string | null;
                branch_id: string | null;
                birth_date: Date | null;
                shipping_insurance: boolean;
                account_status: boolean | null;
                is_email_verified: boolean | null;
                is_online: boolean | null;
                is_verified: boolean | null;
                last_seen: Date | null;
                photo_url: string | null;
                plan_id: string | null;
                type_user_id: string | null;
                is_business: boolean | null;
                ruc: string | null;
                company_name: string | null;
                referral_source_id: string | null;
            };
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        };
    }>;
    findByTracking(trackingNumber: string): Promise<{
        id: string;
        trackingNumber: string;
        packageStatus: import(".prisma/client").$Enums.package_status_enum;
        weight: number;
        volumetricWeight: number;
        length: number;
        width: number;
        height: number;
        createdAt: string;
        updatedAt: string;
        userId: string;
        branchId: string;
        shippingStages: Prisma.JsonValue[];
        insurance: boolean;
        position: string;
        invoice: any;
        user: any;
        branch: {
            id: string;
            name: string;
            address: string;
        };
    }>;
    private generarCodigoCasillero;
    createPackage(packageData: any, operatorData: {
        id: string;
        email: string;
    }): Promise<{
        length: Prisma.Decimal | null;
        id: string;
        created_at: Date;
        updated_at: Date | null;
        branch_id: string | null;
        position: string | null;
        operator_id: string | null;
        width: Prisma.Decimal | null;
        height: Prisma.Decimal | null;
        notes: string | null;
        tracking_number: string | null;
        user_reference: string | null;
        package_status: import(".prisma/client").$Enums.package_status_enum;
        weight: Prisma.Decimal | null;
        volumetric_weight: Prisma.Decimal | null;
        insurance: boolean | null;
        shipping_stages: Prisma.JsonValue[];
        declared_value: Prisma.Decimal | null;
        customs_information: Prisma.JsonValue | null;
        is_fragile: boolean | null;
        estimated_delivery_date: Date | null;
    }>;
    updateStatus(id: string, status: string): Promise<{
        success: boolean;
        message: string;
        data: {
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            position: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        };
    }>;
    updateDimensions(id: string, updateDimensionsDto: UpdateDimensionsDto): Promise<{
        success: boolean;
        message: string;
        data: {
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            position: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        };
    }>;
    updateWeights(id: string, updateWeightsDto: UpdateWeightsDto): Promise<{
        success: boolean;
        message: string;
        data: {
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            position: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        };
    }>;
    updatePackageStatus(trackingNumber: string, status: string, operatorData?: {
        id: string;
        email: string;
    }): Promise<{
        success: boolean;
        message: string;
        data: {
            length: Prisma.Decimal | null;
            id: string;
            created_at: Date;
            updated_at: Date | null;
            branch_id: string | null;
            position: string | null;
            operator_id: string | null;
            width: Prisma.Decimal | null;
            height: Prisma.Decimal | null;
            notes: string | null;
            tracking_number: string | null;
            user_reference: string | null;
            package_status: import(".prisma/client").$Enums.package_status_enum;
            weight: Prisma.Decimal | null;
            volumetric_weight: Prisma.Decimal | null;
            insurance: boolean | null;
            shipping_stages: Prisma.JsonValue[];
            declared_value: Prisma.Decimal | null;
            customs_information: Prisma.JsonValue | null;
            is_fragile: boolean | null;
            estimated_delivery_date: Date | null;
        };
    }>;
    private mapStatusToValidEnum;
    assignUserToPackage(packageId: string, userId: string, operatorData: {
        id: string;
        email: string;
    }): Promise<{
        success: boolean;
        package: {
            id: string;
            tracking_number: string;
            status: import(".prisma/client").$Enums.package_status_enum;
            updatedAt: Date;
            user_reference: string;
            branch_id: string;
            branch_name: string;
            operator_id: string;
            position: string;
        };
        user: {
            id: string;
            email: string;
            name: string;
        };
    }>;
    getPackageClient(packageId: string): Promise<{
        success: boolean;
        hasClient: boolean;
        message: string;
        data: {
            id: string;
            email: string;
            name: string;
            firstName: string;
            lastName: string;
            phone: string;
            photo: string;
            accountStatus: boolean;
            branchName: string;
            planName: string;
            planRate: number;
            userType: string;
            shipping_insurance: boolean;
            assignedAt: Date;
        };
    }>;
    getAssignedNotInvoicedPercentage(branchId: string): Promise<{
        percentage: number;
        assignedNotInvoiced: number;
        totalPackages: number;
        trend: number;
        lastMonthPercentage: number;
    } | {
        percentage: number;
        assignedNotInvoiced: number;
        totalPackages: number;
        trend: number;
        lastMonthPercentage: number;
        message: string;
    }>;
}
